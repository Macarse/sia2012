TP01
====

Para ejecutar el TP01 ir a la carpeta TP01 y ejecutar `mvn package`.
Ir a la carpeta target y ejecutar `java -jar TP01-0.0.1-SNAPSHOT.one-jar.jar --help`
para ver la lista de comandos disponible.

los comandos mas utilizados son:
 -s: para seleccionar la estrategia para resolver el problema deseada. Las opciones validas son: [BFS | DFS | IterativeDepth | Greedy | Astar] 

 -l: para seleccionar el nivel de dificultad del tablero. En estos momentos hay 4 tableros cargados, de los cuales el numero 2 no tiene solucion

 -h: para seleccionar la heuristica deseada. las opciones son: [ BiggerRowsFirst | MorePayers | UpperLevelFirst | HStar ]

 -c: para seleccionar la funcion de costo constante. Si no se asigna ninguna se escogera la default (1). Este costo puede ser cualquier numero float.

 --help: imprime ayuda

Ejemplo de uso:
java -jar TP01-0.0.1-SNAPSHOT.one-jar.jar -l 4 -s Greedy -h Biggerrowsfirst

TP02
====

PRIMERA ENTREGA
===============

REQUIREMENTS:
This program needs to be executed in Matlab!

EXECUTION:
1. Open Matlab and navigate to the folder that contains all the .m files.

How to execute generate the graphics:

 - In the matlab-console type: 
 [in, out, w, er] = plotter(N, error, @input, @function, @derivated_function, @seed);
 	where: 	N = number of entries of the perceptron (in our case between 2 and 5)
 			error = desired error 
 			input = function that creates the input of the perceptron (@createAndInput, @createOrInput for "AND" and "OR")
 			function = activation function (@step , @lineal, @no_lineal_tanh )
 			derivated_function = the activation function derivated.
 			seed = you can provide a constant seed in order to be able to reproduce scenarios or compare functions (@constant_seed) or a variable one (@variable_seed)

 Example:
 	[in, out, w, er] = plotter(5, 0.01, @createAndInput, @step, @step_deriv, @constant_seed);


SEGUNDA ENTREGA
===============

REQUIREMENTS:
This program needs to be executed in Matlab!

EXECUTION:
1. Open Matlab and navigate to the folder that contains all the .m files.

How to execute generate the graphics:

- In the matlab-console type: 
plotter(g, g_deriv, N, input_gen, epsilon, eta);

where:

 - g = activation function (@step , @lineal, @no_lineal_tanh )
 - g_deriv = the activation function derivated.
 - N = number of entries of the perceptron (in our case between 2 and 5)
 - input_gen = function that creates the input of the perceptron (@generateSymmetricIndexes_stepWrap, @generateSymmetricIndexes_stepWrap)
 - epsilon = desired error
 - eta 

Example:

plotter(@no_lineal_exp, @no_lineal_deriv_exp, 5, @generateSymmetricIndexes_stepWrap, 0.001, 0.02);


TERCERA ENTREGA
===============

REQUIREMENTS:
This program needs to be executed in Matlab!

EXECUTION:
1. Open Matlab and navigate to the folder that contains all the .m files.

How to execute generate the graphics:

- In the matlab-console type: 
initial

Inside the initial.m script you will find the variables to modify.

TP03
====

En el archivo initial es el main. 

1. En la variable fileNamesForTesting se ponen los nombres de los archivos para probar.

2. En la carpeta output (valor de la variable output_directory_name) es donde se van a guardar la salida de las im√°genes una vez aplicada a la red.
